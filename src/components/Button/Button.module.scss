@use 'sass:map';
@use '../../styles/effects.scss' as effects;
@use '../../styles/spacing.scss' as spacing;
@use '../../styles/typography.scss' as typography;

.Button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  outline: none;
  border-radius: map.get(effects.$cornerRadius, 'm');
  font: inherit;
  font-weight: 800;
  letter-spacing: map.get(typography.$typo, 'tracking', 'm1');
  line-height: map.get(typography.$typo, 'leading', '4');
  white-space: nowrap;
  box-sizing: border-box;

  cursor: pointer;

  &:focus {
    box-shadow: var(--strokeFocus);
  }

  &:disabled {
    cursor: not-allowed;
  }

  & > * + * {
    margin-left: map.get(spacing.$spacing, 's3');
  }
}

/* ---------------------------------------
  ---- BUTTONS VARIANTS 
  --------------------------------------- */
// Standard buttons
.primary {
  background-color: var(--primary);
  color: var(--textOnPrimary);
}

.secondary {
  background-color: var(--primaryL1);
  color: var(--primary);
}

.primary,
.secondary {
  &:hover {
    background-color: var(--primaryHover);
    color: var(--textOnPrimary);
  }

  &:active {
    background-color: var(--primaryActive);
  }

  &:disabled {
    background-color: var(--disabled);
    color: var(--textOnDisabled);
  }
}

.tertiary {
  background-color: transparent;
  color: var(--primary);

  &:hover {
    color: var(--primaryHover);
  }

  &:active {
    color: var(--primaryActive);
  }

  &:disabled {
    color: var(--textOnDisabled);
  }
}

// Status buttons
$status: warning, success, attention, danger;

@each $value in $status {
  .#{$value} {
    background-color: var(--#{$value});
    color: var(--textOnStatus);

    &:hover,
    &:active {
      background-color: var(--#{$value}Hover);
    }

    &:disabled {
      background-color: var(--disabled);
      color: var(--textOnDisabled);
    }
  }
}

/* ---------------------------------------
  ---- BUTTONS SIZES
  --------------------------------------- */
.xs,
.s {
  font-size: map.get(typography.$typo, 'size', 's2');
  line-height: map.get(typography.$typo, 'leading', '4');

  svg {
    width: map.get(spacing.$spacing, 'm1');
    height: map.get(spacing.$spacing, 'm1');
  }
}

.m,
.l {
  line-height: map.get(typography.$typo, 'leading', '6');

  svg {
    width: map.get(spacing.$spacing, 'm3');
    height: map.get(spacing.$spacing, 'm3');
  }
}

.xs {
  padding: map.get(spacing.$spacing, 's2') map.get(spacing.$spacing, 'm2');

  &.iconOnly {
    padding: map.get(spacing.$spacing, 's2');
  }
}

.s {
  padding: map.get(spacing.$spacing, 's3') map.get(spacing.$spacing, 'm3');

  &.iconOnly {
    padding: map.get(spacing.$spacing, 's3');
  }
}

.m {
  font-size: map.get(typography.$typo, 'size', 's3');
  padding: map.get(spacing.$spacing, 's4') map.get(spacing.$spacing, 'm4');

  &.iconOnly {
    padding: map.get(spacing.$spacing, 's4');
  }
}

.l {
  font-size: map.get(typography.$typo, 'size', 'm1');
  padding: map.get(spacing.$spacing, 's5') map.get(spacing.$spacing, 'm4');

  &.iconOnly {
    padding: map.get(spacing.$spacing, 's5');
  }
}
